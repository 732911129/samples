Let's use optional in Java 8 

:D 

Architecture Refactor
  - Let's draw an architecture diagram

  - Let's think about the architecture for efficient, clean and simple.

  - Let's refactor the Service and Runtime Service classes. 

  - Let's refactor the CAVEDB classes.

  - Let's use a media object for sessions. 

Install Todo
  - Make install script for windows. 
    - Install powershell 5. 
    - Perform steps as below:
      - Install JDK 1.8
      - Configure JAVA_HOME
      - Add JAVA / bin to path ( JDK )
      - Install MAVEN
      - Add Maven to PATH
      - Unzip project and build project.
      - Start server. 
      - Open localhost:8080 in browser.

  - Make install script for linux and macosx to apt-get everything required. 
    - Install JDK 1.8
    - Configure JAVA_HOME
    - Add JAVA / bin to path ( JDK )
    - Install MAVEN
    - Add Maven to PATH
    - Unzip project and build project.
    - Start server. 
    - Open localhost:8080 in browser.

Install Instructions
  - Create
   - With the install script we can keep the install instructions simple.

Video 
  - Create
   - Make the video first and talk about the architecture. 

Architecture Document
  - Create
   - Write the document inspired by the talk about the architecture.

Java Code and HTML Todo
  - Sessions, Cave, Humans refactor, and improvement-creating upgrade
    - Session object works to be a Media. 
      - Perhaps a CaveSession API ? 
    - Refactor and clean up code.
      - Particularly the cross cutting concern of humans, cave and session
      where services make regard to those. Answer the question what is a clean and decoupled and minimum effort way to have Services access cave and the CaveHumanAPI and sessions ? 
  - Add unit tests. 
  - Add favicon.ico ( or other static files ) handlers. Perhaps make the dispatcher really a dispatcher and not just serving a link to login. 


