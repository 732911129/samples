from HTMLParser import HTMLParser as html
import logging
from binder import Binder
from printer import Printer
from specialty_utils import superclass

class ProjectionRequestParser( html ):
  """
    Understands parsing sections of HTML in the for attribute
    of an input element to project that input to different other
    tags. Builds the table used for this projection from the data
    in these attributes

    Understands: p-tag, p-attr, p-data and their attributes.
  """
  output = ""

  def reset( self ):
    superclass( self ).reset( self )
    self.output = ""

  def get_output( self ):
    self.output


class ProjectionPointParser( html ):
  """
    Parses attributes or HTML data that contains p-value tags, and replaces those tags with their values
  """
  output = ""
  requests = dict()

  def reset( self ):
    superclass( self ).reset( self )
    output = ""
    requests = dict()

  def get_output( self ):
    return self.output

  def imprint( self, id, raw, requests ):
    self.reset()
    self.requests = requests
    self.feed( raw )
    self.close()
    result = self.get_output()
    self.reset()
    return result

class ImprintingParser( html ):
  MULTIPLE_ATTRIBUTE_VALUE_SEPARATOR = " "
  binder = Binder()
  printer = Printer()
  model = None
  next_data = None

  def has_attribute( self, attr_name, attrs ):
    for attr in attrs:
      if attr[ 0 ] == attr_name:
        return True
    return False

  def get_attribute( self, attr_name, attrs ):
    if self.has_attribute( attr_name, attrs ):
      return ( attr_name, self.get_attribute_value( attr_name, attrs ) )
    return None

  def get_attribute_value( self, attr_name, attrs ):
    selected = []
    has_attribute = False
    for attr in attrs:
      if attr[ 0 ] == attr_name:
        has_attribute = True
        try:
          selected.append( attr[ 1 ] )
        except:
           pass
    if has_attribute:
      return self.MULTIPLE_ATTRIBUTE_VALUE_SEPARATOR.join( selected )
    return None

  def perform_bind( self, tags ):
    for tag_bound_data in tags:
      tag, attrs, data, close_tag = None, None, None, None
      tag, attrs, data, close_tag = tag_bound_data
      if tag and not close_tag:
        self.printer.print_tag( tag, attrs )
      if data:
        self.printer.print_data( data )
      print close_tag
      if close_tag:
        self.printer.print_end_tag( tag )

  def handle_starttag( self, tag, attrs ):
    tags = []
    bound_data = None
    try:
      bound_data = self.binder.try_bind( self, tag, attrs, self.model )
    except BaseException as e:
      logging.warn( e ) 

    if type( bound_data ) is tuple:
      tags = [ bound_data ]
    elif type( bound_data ) is list:
      tags = bound_data
    elif bound_data is None:
      tags = [ ( tag, attrs, None, None ) ]

    self.perform_bind( tags )

  def handle_startendtag( self, tag, attrs ):
    self.handle_starttag( tag, attrs )

  def handle_data( self, data ):
    self.printer.print_data( data )

  def handle_endtag( self, tag ):
    self.printer.print_end_tag( tag )

  def reset( self ):
    superclass( self ).reset( self )
    self.binder = Binder()
    self.printer = Printer()
    self.next_data = None
    self.model = None
    self.printer.start_new_document()

  def close( self ):
    superclass( self ).close( self ) 
    self.printer.end_document()

  def get_output( self ):
    return self.printer.get_document()

  def imprint( self, model, view ):
    self.reset()
    self.model = model
    self.feed( view )
    self.close()
    result = self.get_output()
    self.reset()
    return result
